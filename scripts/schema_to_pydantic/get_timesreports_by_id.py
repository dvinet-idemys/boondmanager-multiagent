# generated by datamodel-codegen:
#   filename:  get_timesreports_by_id.json
#   timestamp: 2025-10-13T08:50:50+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class Language(Enum):
    fr = 'fr'
    en = 'en'
    es = 'es'


class Code(Enum):
    moreThanNumberOfWorkingDays = 'moreThanNumberOfWorkingDays'
    workplaceTimesMoreThanNumberOfWorkingDays = 'workplaceTimesMoreThanNumberOfWorkingDays'
    workplaceTimesLessThanNumberOfWorkingDays = 'workplaceTimesLessThanNumberOfWorkingDays'
    atLeastOneAbsenceQuotaExceeded = 'atLeastOneAbsenceQuotaExceeded'
    wrongAbsences = 'wrongAbsences'
    wrongMandatoryLeaves = 'wrongMandatoryLeaves'
    noDeliveryOnProject = 'noDeliveryOnProject'
    projectDoesNotExist = 'projectDoesNotExist'
    deliveryDoesNotExist = 'deliveryDoesNotExist'
    outsideContractDates = 'outsideContractDates'
    outsideDeliveryDates = 'outsideDeliveryDates'
    outsideDocumentDates = 'outsideDocumentDates'
    lessThanNumberOfWorkingDaysInsideContractDates = (
        'lessThanNumberOfWorkingDaysInsideContractDates'
    )
    moreThanNumberOfWorkingDaysInsideContractDates = (
        'moreThanNumberOfWorkingDaysInsideContractDates'
    )
    noSignedTimesheet = 'noSignedTimesheet'
    workUnitRatesNotEqual = 'workUnitRatesNotEqual'


class Project(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Project1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    reference: constr(max_length=100)


class Delivery(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Delivery1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    title: constr(max_length=100)
    startDate: constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    endDate: constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    calendar: Optional[constr(max_length=100)] = None


class WorkUnitType(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class WorkUnitType1(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: conint(ge=1)
    name: constr(max_length=250)


class Project2(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    reference: constr(max_length=100)
    mailValidatorSignature: Optional[constr(max_length=100)] = None


class Warning(BaseModel):
    class Config:
        extra = Extra.forbid

    code: Code = Field(..., description="Warning's code")
    detail: str = Field(..., description="Warning's message")
    project: Union[Project, Project1]
    delivery: Union[Delivery, Delivery1]
    workUnitType: Union[WorkUnitType, WorkUnitType1]
    projects: Optional[List[Project2]] = Field(None, unique_items=True)


class ExpectedValidatorsAllowedForValidateItem(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    firstName: constr(min_length=1, max_length=100)
    lastName: constr(min_length=1, max_length=100)


class ExpectedValidatorsAllowedForUnvalidateItem(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    firstName: constr(min_length=1, max_length=100)
    lastName: constr(min_length=1, max_length=100)


class ExpectedValidatorsAllowedForRejectItem(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    firstName: constr(min_length=1, max_length=100)
    lastName: constr(min_length=1, max_length=100)


class Meta(BaseModel):
    version: str = Field(..., description="BoondManager's version")
    isLogged: bool = Field(..., description='true if user is logged')
    language: Language = Field(..., description="User's language")
    warnings: Optional[List[Warning]] = None
    expectedValidatorsAllowedForValidate: Optional[
        List[ExpectedValidatorsAllowedForValidateItem]
    ] = None
    expectedValidatorsAllowedForUnvalidate: Optional[
        List[ExpectedValidatorsAllowedForUnvalidateItem]
    ] = None
    expectedValidatorsAllowedForReject: Optional[List[ExpectedValidatorsAllowedForRejectItem]] = (
        None
    )


class Type(Enum):
    timesreport = 'timesreport'


class State(Enum):
    savedAndNoValidation = 'savedAndNoValidation'
    waitingForValidation = 'waitingForValidation'
    validated = 'validated'
    rejected = 'rejected'


class ActivityType(Enum):
    production = 'production'
    absence = 'absence'
    internal = 'internal'
    exceptionalTime = 'exceptionalTime'
    exceptionalCalendar = 'exceptionalCalendar'


class WorkUnitType2(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: conint(ge=1)
    activityType: ActivityType
    name: constr(max_length=250)


class Delivery2(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Delivery3(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    title: Optional[constr(max_length=100)] = None
    startDate: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None
    endDate: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None


class Batch(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Batch1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    title: Optional[constr(max_length=100)] = None


class Project3(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Project4(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    reference: Optional[constr(max_length=100)] = None


class RegularTime(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    startDate: constr(regex=r'^|[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    duration: float
    row: int = Field(
        ..., description='If it is a new line then row should be inferior or equal to 0'
    )
    workUnitType: WorkUnitType2
    calendar: Optional[constr(max_length=100)] = None
    delivery: Union[Delivery2, Delivery3]
    batch: Union[Batch, Batch1]
    project: Union[Project3, Project4]


class WorkUnitType3(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: conint(ge=1)
    activityType: ActivityType
    name: constr(max_length=250)


class Batch2(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Batch3(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    title: Optional[constr(max_length=100)] = None


class ExceptionalTime(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    startDate: constr(regex=r'^|[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    endDate: constr(regex=r'^|[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    duration: float
    recovering: bool
    description: constr(max_length=1000)
    workUnitType: WorkUnitType3
    delivery: Delivery3 = Field(..., description='Delivery on which exceptional time depends')
    batch: Union[Batch2, Batch3]
    project: Project4 = Field(..., description='Project on which exceptional time depends')


class WorkUnitType4(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: conint(ge=1)
    activityType: ActivityType
    name: constr(max_length=250)


class AbsencesTime(BaseModel):
    class Config:
        extra = Extra.forbid

    startDate: constr(regex=r'^|[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    duration: float
    workUnitType: WorkUnitType4


class WorkUnitType5(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: conint(ge=1)
    activityType: ActivityType
    name: constr(max_length=250)


class Delivery5(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Delivery6(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    title: Optional[constr(max_length=100)] = None
    startDate: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None
    endDate: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None
    calendar: Optional[constr(max_length=100)] = None


class Batch4(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Batch5(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    title: Optional[constr(max_length=100)] = None


class Project6(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Project7(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    reference: Optional[constr(max_length=100)] = None


class PlannedTime(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    startDate: constr(regex=r'^|[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    duration: float
    row: int = Field(
        ..., description='If it is a new line then row should be inferior or equal to 0'
    )
    workUnitType: WorkUnitType5
    delivery: Union[Delivery5, Delivery6]
    batch: Union[Batch4, Batch5]
    project: Union[Project6, Project7]


class WorkplaceType(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: conint(ge=1)
    name: constr(max_length=250)


class WorkplaceTime(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    startDate: constr(regex=r'^|[0-9]{4}-[0-9]{2}-[0-9]{2}$')
    duration: float
    row: int = Field(
        ..., description='If it is a new line then row should be inferior or equal to 0'
    )
    workplaceType: WorkplaceType


class Attributes(BaseModel):
    class Config:
        extra = Extra.forbid

    creationDate: Optional[
        constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{4}$')
    ] = None
    updateDate: Optional[
        constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{4}$')
    ] = None
    term: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}$')] = None
    workUnitRate: Optional[float] = None
    informationComments: Optional[constr(max_length=500)] = None
    closed: Optional[bool] = None
    state: Optional[State] = None
    regularTimes: Optional[List[RegularTime]] = Field(
        None, description='List of regular times', unique_items=True
    )
    exceptionalTimes: Optional[List[ExceptionalTime]] = Field(
        None, description='List of exceptional times', unique_items=True
    )
    absencesTimes: Optional[List[AbsencesTime]] = Field(
        None, description='List of absences times', unique_items=True
    )
    plannedTimes: Optional[List[PlannedTime]] = Field(
        None, description='List of planned times', unique_items=True
    )
    workplaceTimes: Optional[List[WorkplaceTime]] = Field(
        None, description='List of workplace times', unique_items=True
    )


class Type1(Enum):
    resource = 'resource'


class Data1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type1


class Resource(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data1


class CreatedBy(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Data2(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type1


class CreatedBy1(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data2


class Type3(Enum):
    agency = 'agency'


class Data3(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type3


class Agency(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data3


class Type4(Enum):
    document = 'document'


class Datum(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    type: Type4


class Files(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum] = Field(..., unique_items=True)


class ExpensesReport(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Type5(Enum):
    expensesreport = 'expensesreport'


class Data4(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type5


class ExpensesReport1(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data4


class Type6(Enum):
    order = 'order'


class Datum1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type6


class Orders(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum1] = Field(..., unique_items=True)


class Type7(Enum):
    project = 'project'


class Datum2(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type7
    mailValidatorSignature: Optional[constr(max_length=100)] = None


class Projects(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum2] = Field(..., unique_items=True)


class Type8(Enum):
    validation = 'validation'


class Datum3(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type8


class Validations(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum3] = Field(..., unique_items=True)


class Type9(Enum):
    resource = 'resource'


class Datum4(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type9


class ValidationWorkflow(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum4] = Field(..., unique_items=True)


class Type10(Enum):
    signature = 'signature'


class Datum5(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type10


class Signatures(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum5]


class Relationships(BaseModel):
    class Config:
        extra = Extra.forbid

    resource: Optional[Resource] = Field(None, description="Timesheet's resource")
    createdBy: Optional[Union[CreatedBy, CreatedBy1]] = None
    agency: Optional[Agency] = Field(None, description="Timesheet's agency")
    files: Optional[Files] = Field(None, description="List of timesheet's files")
    expensesReport: Optional[Union[ExpensesReport, ExpensesReport1]] = None
    orders: Optional[Orders] = Field(
        None, description="List of timesheet's orders available on this term"
    )
    projects: Optional[Projects] = Field(
        None, description="List of timesheet's projects available on this term"
    )
    validations: Optional[Validations] = Field(None, description="List of timesheet's validations")
    validationWorkflow: Optional[ValidationWorkflow] = Field(
        None, description="Timesheet's expected validators"
    )
    signatures: Optional[Signatures] = Field(
        None, description='The signatures related to the timesheet'
    )


class Data(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type
    attributes: Optional[Attributes] = None
    relationships: Optional[Relationships] = None


class State1(Enum):
    pending = 'pending'
    validated = 'validated'


class Attributes1(BaseModel):
    class Config:
        extra = Extra.forbid

    state: Optional[State1] = None
    creationDate: Optional[
        constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{4}$')
    ] = None
    remindDate: Optional[
        constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{4}$')
    ] = None
    date: Optional[
        constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{4}$')
    ] = None
    lastName: Optional[str] = None
    firstName: Optional[str] = None
    function: Optional[str] = None
    token: Optional[constr(regex=r'^[a-z|A-Z|0-9]+$')] = None
    mailValidatorSignature: Optional[constr(regex=r'^[a-z|A-Z|0-9]+$')] = None


class CreatedBy2(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Type12(Enum):
    resource = 'resource'


class Data5(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type12


class CreatedBy3(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data5


class RemindedBy(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Data6(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type12


class RemindedBy1(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data6


class Relationships1(BaseModel):
    class Config:
        extra = Extra.forbid

    createdBy: Optional[Union[CreatedBy2, CreatedBy3]] = None
    remindedBy: Optional[Union[RemindedBy, RemindedBy1]] = None


class Included(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type10
    attributes: Optional[Attributes1] = None
    relationships: Optional[Relationships1] = None


class AllowExceptionalTimes(Enum):
    int__1 = -1
    int_0 = 0
    int_1 = 1


class WorkUnitTypesAllowedItem(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: conint(ge=1)
    name: constr(max_length=250)
    activityType: ActivityType


class WorkUnitRate(Enum):
    notUsed = 'notUsed'


class DayOfWeek(Enum):
    monday = 'monday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'
    thursday = 'thursday'
    friday = 'friday'
    saturday = 'saturday'
    sunday = 'sunday'


class WorkplacesDefaultWeek(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: Optional[conint(ge=1)] = None
    dayOfWeek: DayOfWeek = Field(..., description='Day of week for workplace time setting')
    duration: float = Field(..., description='Duration for the workplace times settings')


class Attributes2(BaseModel):
    class Config:
        extra = Extra.forbid

    firstName: Optional[constr(min_length=1, max_length=100)] = None
    lastName: Optional[constr(min_length=1, max_length=100)] = None
    function: Optional[constr(max_length=100)] = None
    allowExceptionalTimes: Optional[AllowExceptionalTimes] = None
    canRecoverExceptionalTimes: Optional[bool] = None
    workUnitTypesAllowed: Optional[List[WorkUnitTypesAllowedItem]] = Field(None, unique_items=True)
    workUnitRate: Optional[Union[WorkUnitRate, float]] = None
    workplacesDefaultWeek: Optional[List[WorkplacesDefaultWeek]] = Field(None, unique_items=True)


class Type15(Enum):
    contract = 'contract'


class Datum6(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type15


class Contracts(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum6] = Field(..., unique_items=True)


class Relationships2(BaseModel):
    contracts: Optional[Contracts] = Field(None, description="Resource's contracts/amendments")


class Included1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type12
    attributes: Optional[Attributes2] = None
    relationships: Optional[Relationships2] = None


class Type16(Enum):
    agency = 'agency'


class Alert(Enum):
    moreThanNumberOfWorkingDays = 'moreThanNumberOfWorkingDays'
    workplaceTimesMoreThanNumberOfWorkingDays = 'workplaceTimesMoreThanNumberOfWorkingDays'
    workplaceTimesLessThanNumberOfWorkingDays = 'workplaceTimesLessThanNumberOfWorkingDays'
    atLeastOneAbsenceQuotaExceeded = 'atLeastOneAbsenceQuotaExceeded'
    wrongAbsences = 'wrongAbsences'
    outsideContractDates = 'outsideContractDates'
    lessThanNumberOfWorkingDaysInsideContractDates = (
        'lessThanNumberOfWorkingDaysInsideContractDates'
    )
    moreThanNumberOfWorkingDaysInsideContractDates = (
        'moreThanNumberOfWorkingDaysInsideContractDates'
    )


class TimesAlert(BaseModel):
    class Config:
        extra = Extra.forbid

    alert: Alert
    blocking: bool


class Attributes3(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[constr(min_length=1, max_length=100)] = None
    workUnitRate: Optional[Union[WorkUnitRate, float]] = None
    calendar: Optional[constr(max_length=100)] = None
    workplaceTypes: Optional[List[WorkplaceType]] = Field(
        None, description="Agency's workplaceTypes", unique_items=True
    )
    timesLegals: Optional[constr(max_length=5000)] = None
    timesAlerts: Optional[List[TimesAlert]] = Field(None, unique_items=True)


class Included2(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type16
    attributes: Optional[Attributes3] = None


class Type17(Enum):
    document = 'document'


class Attributes4(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(min_length=1)
    category: constr(min_length=1)


class Type18(Enum):
    project = 'project'


class Data7(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type18


class Project8(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data7


class Type19(Enum):
    signature = 'signature'


class Data8(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type19


class Signature(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data8


class Relationships3(BaseModel):
    class Config:
        extra = Extra.forbid

    project: Optional[Project8] = Field(None, description='The project related to the document')
    signature: Optional[Signature] = Field(None, description='The signature related to the file')


class Included3(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    type: Type17
    attributes: Optional[Attributes4] = None
    relationships: Optional[Relationships3] = None


class Type20(Enum):
    delivery = 'delivery'


class Attributes5(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[constr(max_length=100)] = None
    startDate: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None
    endDate: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None


class Included4(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type20
    attributes: Optional[Attributes5] = None


class Type21(Enum):
    batch = 'batch'


class Attributes6(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[constr(max_length=100)] = None


class Included5(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type21
    attributes: Optional[Attributes6] = None


class Type22(Enum):
    project = 'project'


class Attributes7(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: Optional[constr(max_length=100)] = None
    mailValidatorSignature: Optional[constr(max_length=100)] = None
    isMonitorSignedTimesheets: Optional[bool] = Field(
        None, description="true if the project's order monitor signed timesheets"
    )


class Company(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Type23(Enum):
    company = 'company'


class Data9(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type23


class Company1(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data9


class Type24(Enum):
    delivery = 'delivery'


class Datum7(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type24


class Deliveries(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum7] = Field(..., unique_items=True)


class Type25(Enum):
    batch = 'batch'


class Datum8(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type25


class Batches(BaseModel):
    class Config:
        extra = Extra.forbid

    data: List[Datum8] = Field(..., unique_items=True)


class Relationships4(BaseModel):
    class Config:
        extra = Extra.forbid

    company: Optional[Union[Company, Company1]] = None
    deliveries: Optional[Deliveries] = Field(
        None, description="List of project's deliveries available on this term"
    )
    batches: Optional[Union[List, Batches]] = Field(
        None, description="List of project's batches available on this term"
    )


class Included6(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type22
    attributes: Optional[Attributes7] = None
    relationships: Optional[Relationships4] = None


class Type26(Enum):
    company = 'company'


class Attributes8(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[constr(min_length=1, max_length=100)] = None


class Included7(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type26
    attributes: Optional[Attributes8] = None


class Type27(Enum):
    validation = 'validation'


class State2(Enum):
    waitingForValidation = 'waitingForValidation'
    validated = 'validated'
    rejected = 'rejected'


class Attributes9(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None
    state: Optional[State2] = None
    reason: Optional[str] = None


class RealValidator(BaseModel):
    class Config:
        extra = Extra.forbid

    data: None


class Type28(Enum):
    resource = 'resource'


class Data10(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type28


class RealValidator1(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data10


class Data11(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type28


class ExpectedValidator(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data11


class Relationships5(BaseModel):
    class Config:
        extra = Extra.forbid

    realValidator: Optional[Union[RealValidator, RealValidator1]] = None
    expectedValidator: Optional[ExpectedValidator] = Field(
        None, description="Validation's expected validator"
    )


class Included8(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type27
    attributes: Optional[Attributes9] = None
    relationships: Optional[Relationships5] = None


class Type30(Enum):
    order = 'order'


class Attributes10(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: Optional[constr(max_length=250)] = None
    number: Optional[constr(min_length=1, max_length=250)] = None


class Type31(Enum):
    project = 'project'


class Data12(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type31


class Project9(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data12


class Relationships6(BaseModel):
    class Config:
        extra = Extra.forbid

    project: Optional[Project9] = Field(None, description="Order's project")


class Included9(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type30
    attributes: Optional[Attributes10] = None
    relationships: Optional[Relationships6] = None


class Type32(Enum):
    contract = 'contract'


class Attributes11(BaseModel):
    class Config:
        extra = Extra.forbid

    startDate: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None
    endDate: Optional[constr(regex=r'^|[0-9]{4}-[0-9]{2}-[0-9]{2}$')] = None
    calendar: Optional[constr(max_length=100)] = None


class Type33(Enum):
    agency = 'agency'


class Data13(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type33


class Agency1(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data13


class Relationships7(BaseModel):
    agency: Optional[Agency1] = Field(None, description="Contract's agency")


class Included10(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type32
    attributes: Optional[Attributes11] = None
    relationships: Optional[Relationships7] = None


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    meta: Meta
    data: Data
    included: Optional[
        List[
            Union[
                Included,
                Included1,
                Included2,
                Included3,
                Included4,
                Included5,
                Included6,
                Included7,
                Included8,
                Included9,
                Included10,
            ]
        ]
    ] = Field(None, unique_items=True)
