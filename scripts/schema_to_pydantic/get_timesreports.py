# generated by datamodel-codegen:
#   filename:  get_timesreports.json
#   timestamp: 2025-10-13T08:46:01+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class Language(Enum):
    fr = 'fr'
    en = 'en'
    es = 'es'


class Totals(BaseModel):
    class Config:
        extra = Extra.forbid

    rows: Optional[conint(ge=0)] = Field(None, description='Number total of entities returned')


class Meta(BaseModel):
    version: str = Field(..., description="BoondManager's version")
    isLogged: bool = Field(..., description='true if user is logged')
    language: Language = Field(..., description="User's language")
    totals: Optional[Totals] = None


class Type(Enum):
    timesreport = 'timesreport'


class State(Enum):
    savedAndNoValidation = 'savedAndNoValidation'
    waitingForValidation = 'waitingForValidation'
    validated = 'validated'
    rejected = 'rejected'


class Attributes(BaseModel):
    class Config:
        extra = Extra.forbid

    term: Optional[constr(regex=r'^[0-9]{4}-[0-9]{2}$')] = None
    state: Optional[State] = None
    closed: Optional[bool] = None


class Type1(Enum):
    agency = 'agency'


class Data(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type1


class Agency(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data


class Type2(Enum):
    resource = 'resource'


class Data1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type2


class Resource(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Data1


class Relationships(BaseModel):
    class Config:
        extra = Extra.forbid

    agency: Optional[Agency] = Field(None, description="Timesheet's agency")
    resource: Optional[Resource] = Field(None, description="Timesheet's resource")


class Datum(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type
    attributes: Optional[Attributes] = None
    relationships: Optional[Relationships] = None


class Attributes1(BaseModel):
    class Config:
        extra = Extra.forbid

    firstName: Optional[constr(min_length=1, max_length=100)] = None
    lastName: Optional[constr(min_length=1, max_length=100)] = None


class Included(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type2
    attributes: Optional[Attributes1] = None


class Type4(Enum):
    agency = 'agency'


class Attributes2(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[constr(min_length=1, max_length=100)] = None


class Included1(BaseModel):
    class Config:
        extra = Extra.forbid

    id: constr(regex=r'^[1-9][0-9]*$')
    type: Type4
    attributes: Optional[Attributes2] = None


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    meta: Meta
    data: List[Datum] = Field(..., unique_items=True)
    included: Optional[List[Union[Included, Included1]]] = Field(None, unique_items=True)
